#!/usr/bin/env bash

# Use bash's pipefail option to get errors during failure in a command
# pipeline.  This is useful to get notified about an error from dbus-send
# when used with "|tail".
set -o pipefail

if [ -t 0 ]  # is a tty.
then
    # rlwrap provides readline functionality for "read", which is more enhanced
    # than bash's "read" itself.
    # It can be disabled/overridden using 'AWESOME_RLWRAP= tde-client'.
    if [ -z "${AWESOME_RLWRAP+x}" ]; then
        AWESOME_RLWRAP="$(which rlwrap 2>/dev/null)"
    fi
    if [ -n "$AWESOME_RLWRAP" ]
    then
        if [ "$A_RERUN" = "" ]
        then
            A_RERUN="no" exec "$AWESOME_RLWRAP" "$0" "$@"
        fi
        READ_ARGS=""
    else
        # No rlwrap: use bash's readline.
        READ_ARGS="-e"
    fi
fi

DBUS_SEND=dbus-send

which ${DBUS_SEND} > /dev/null
if test $? = 1
then
    echo "E: Unable to find" ${DBUS_SEND}
    exit 1
fi

DBUS_PATH=/
DBUS_DEST=org.awesomewm.awful
DBUS_METHOD=${DBUS_DEST}.Remote.Eval

FATAL_ERRORS=1
a_dbus_send()
{
    $DBUS_SEND --dest=$DBUS_DEST --type=method_call --print-reply \
        $DBUS_PATH $DBUS_METHOD string:"$1" | tail -n +2
    ret=$?
    if [ "$ret" != 0 ] && [ "$FATAL_ERRORS" != 0 ]; then
        echo "E: $DBUS_SEND failed." >&2
        exit $ret
    fi
}

print_greetings()
{
    echo "Welcome to the tde-client repl interface!"
    echo "You can execute lua code here."
    echo "The documentation: https://tos.odex.be/docs"
    echo ""
    echo "Build and maintained by Tom Meyers"
    echo "TDE comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law."
    echo ""
    echo "Run the help command for more information"
}

print_help()
{
    clear
    echo "Usage: tde-client [-h|--help] [command [command...]]
tos desktop environment remote execution

tde-client is a remote command line interface to TDE.
It communicates with TDE via D-Bus, allowing remote execution of Lua code.

This code gets ran in a protected mode, making sure you can't crash the desktop environment.

Run without a command to enter REPL (read-eval-print-loop) mode.
If you are in REPL mode these are the available commands:
- help
- quit
"
}

if [ $# -ne 0 ]
then
    # check for command-line arguments
    ARGS=()
    for arg in "$@"; do
        if [ "$arg" = "-h" ] || [ "$arg" = "--help" ]; then
            print_help
            exit 0
        else
            ARGS+=("$arg")
        fi
    done
    # run arguments
    for arg in "${ARGS[@]}"; do
        a_dbus_send "$arg"
    done
elif [ -t 0 ]
then
    FATAL_ERRORS=0
    print_greetings
    while read $READ_ARGS -p "tde âž¡ " -r line
    do
        if [ "$line" = "" ]; then
            continue
        fi
        # gracefull shutdown
        if [ "$line" == "exit" ] || [ "$line" == "exit()" ] || [ "$line" == "quit" ] || [ "$line" == "quit()" ]; then
            exit 0
        fi

        if [ "$line" == "help" ] || [ "$line" == "help()" ]; then
            print_help
            continue
        fi
        # don't use the return keyword when '=' is used, when '==' is used, do use return
        if echo "$line" | grep -q "[^=]=[^=]"; then
            a_dbus_send "$line"
            continue
        fi
        a_dbus_send "return $line"
    done
else
    a_dbus_send "$(cat)"
fi

# vim: filetype=sh:expandtab:shiftwidth=4:tabstop=8:softtabstop=4:textwidth=80
